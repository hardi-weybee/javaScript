/////simple array methods

1. slice doensn't alter the original array
slice() - gives all array
slice(start) - starts to slice the array from start index
slice(start, end) - starting and ending index 
slice(-index) - extrects indexes from last
if start is greater than index range it returns empty array
if end is greater than index range it returns array upto end




2. splice alters the original array
splice() - gives empty array
splice(start) - gives the array from start index specified upto end
if start index is greater than the length of array it returns empty array
splice(start, end) - gives array from start index to end index
splice(start, deletecount, item) - replace item of start with the deletecount index
example: const months = ['Jan', 'March', 'April', 'June'];
         months.splice(4, 1, 'May');   // replaces 1 element at index 4
	 console.log(months);   // Array ["Jan", "March", "April", "May"]

splice(start, deletecount, item1, item2, item....) - replace the number of specified deletecount with the given items




3. reverse() alters the original array
reverses the array(first becomes the last and last becomes the first)
reversing array like object - in that we need to mention the length of the key value pairs along with the object pairs
examples:  
const obj = {0: 1, 1: 2, 2: 3, length: 3};
console.log(obj); // {0: 1, 1: 2, 2: 3, length: 3}

Array.prototype.reverse.call(obj); //same syntax for using apply()
console.log(obj); // {0: 3, 1: 2, 2: 1, length: 3}



4. concat() used to merge two or more array and it doen not alter the original array instead returns new array
concat() - returns original array
cancat(value)
conact(value, value.......)



5. join() concatenates all elements in an array into a new string seperated by any specified seperator
join() - joins elements without anything      a.join();      // 'Wind,Water,Fire'
join(seperator) - join the element with the seperator as mentioned
join('') - joins the string without anything     a.join('');    // 'WindWaterFire'





/////the new at method
at(index) works same as array[] 
example:
const colors = ['red', 'green', 'blue'];

// Using length property
const lengthWay = colors[colors.length-2];
console.log(lengthWay); // Logs: 'green'

// Using slice() method. Note an array is returned
const sliceWay = colors.slice(-3, -1);
console.log(sliceWay[1]); // Logs: 'green'

// Using at() method
const atWay = colors.at(-2);
console.log(atWay); // Logs: 'green'





/////looping arrays.. foreach
we cannot break the foreach loop that is break and continue do not work in foreach loop
so foreach always loops over the entire array

the foreach() method executes provided function once for each array element

syntax:
// Arrow function
forEach((element) => { /* ... */ })
forEach((element, index) => { /* ... */ })
forEach((element, index, array) => { /* ... */ })

// Callback function
forEach(callbackFn)
forEach(callbackFn, thisArg)

// Inline callback function
forEach(function(element) { /* ... */ })
forEach(function(element, index) { /* ... */ })
forEach(function(element, index, array){ /* ... */ })
forEach(function(element, index, array) { /* ... */ }. thisArg)

in foreach the first parameteris always the current element, second is always the current index and third is the looping array

example:
const arraySparse = [1, 3,, 7];
let numCallbackRuns = 0;

arraySparse.forEach((element) => {
  console.log({ element });
  numCallbackRuns++;
});

console.log({ numCallbackRuns });

// 1
// 3
// 7
// numCallbackRuns: 3
// comment: as you can see the missing value between 3 and 7 didn't invoke callback function.





/////foreach with maps and sets
works same for maps and sets with the same 3 parameters the value the key and the map or set

for map:
const formap = new Map([['first', 'second'], ['third', 'forth']]);
formap.forEach(function(value, key, map) {
	console.log(`${key}: ${value}`);
});                         
        // first: second
	   third: forth


for set:
const formap = new Set(['first', 'second', 'third', 'forth']);
formap.forEach(function(value, key, map) {
	console.log(`${key}: ${value}`);
});
        // first: first
 	   second: second
 	   third: third
 	   forth: forth

here in set there is no such thing as key so in a parameter key is only the value so we can pass '_' as a throwaway variable




/////data transformation(map, filter, reduce)

MAP METHOD is another method to loop over arrays kind of similar to forEach method but map creates a brand new array based on original array

so map takes an array loops over that array and apply condition to each array element
basically it maps the values of the original array to new array and so it's called map method
map are more useful than forEach method

example:
const number = [1, 2, 3];
const ans = number.map(fn);

function fn(n) {
	return n * 2;
}

console.log(ans);      // (3) [2, 4, 6]



FILTER METHOD is used to filter for elements in original array which satisfy certain condition
so basically filter returns new array containing array elements that passed specified test condition

example:
const number = [10, 40, 35, 18, 33, 19, 90];

const ans = number.filter(function(n) {
	return n >= 20;
});

console.log(number);     // (7) [10, 40, 35, 18, 33, 19, 90]
console.log(ans);        // (4) [40, 35, 33, 90]



REDUCE METHOD reduces all array elements down to single value(imagine a snowball that keeps getting bigger and bigger as it rolls down a hill)

example:
const list = [10, 20, 30, 40];

const ans = list.reduce((acc, current) => acc + current, 0);   [here 0 is the initial accumulator value if we write there 10 then ans will be 100]

console.log(list);         // (4) [10, 20, 30, 40]
console.log(ans);          // 100




/////chaining method
use map, filter and reduce methods in chain 




/////find method
find method is bit similar to filter method but there are 2 differences
- filter method returns all the elements that match the condition while find only returns the first occurence
- filter method returns a new array while find only returns the element itself



/////findindex method
finds the index of the element that we mentioned or index of the condition that we mentioned
similar to the indexOf method but in findIndex method we can pass any complex condition and it will give index if the condition is true





/////some and every method
similar to include method but include checks for equality and only for specified element but

const a = [1, 2, 3, 4, 5]

// EQUALITY
console.log(a.includes(30));     // false

some method checks for a specified condition 
// SOME: CONDITION
const x = a.some(z => z > 2);
console.log(x);                    // true

every method is same as some the only difference is that every method only returns true if all the elements satisfies the specified condition
// EVERY
const p = a.every(z => z > 2);
console.log(p);                    // false





/////flat and flatMap
flat method flats the array in one single array if we have nested arrays 
but the flat method only goes one level deep
example:
const a = [[1, 2], [3, 4, 5], [6, 7, 8, 9, 10]];
console.log(a.flat());               // (10) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

const a = [[1, 2], [3, [4, 5]], [6, 7, [8, 9], 10]];
console.log(a.flat());               // (8) [1, 2, 3, Array(2), 6, 7, Array(2), 10]

but we can go any level deep by mentioning the level of nesting to the flat method
const a = [[1, 2], [3, [4, 5]], [6, 7, [8, 9], 10]];
console.log(a.flat(2));              // (10) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

real example:
const a = [{name: "hardi", value: "1", rating: [10, 30, 90, -50, 70, 55, -20, -33, 19, -5]}];
const sum = a.map(x => x.rating);    
console.log(sum);                     // [Array(10)]

const sum1 = sum.flat();
console.log(sum1);                    // (10) [10, 30, 90, -50, 70, 55, -20, -33, 19, -5]

const sum2 = sum1.reduce((acc, ele) => acc + ele, 0);
console.log(sum2);                    // 166

--------------OR----------------------
const sum = a.map(x => x.rating).flat().reduce((acc, ele) => acc + ele, 0);
console.log(sum);                     // 166



flatMap method basically combines the flat and map method but flatMap method only goes one level deep
so if there is need to go many level deep then we need to use the flat method instead
the same real example:
const sum = a.flatMap(x => x.rating).reduce((acc, ele) => acc + ele, 0);
console.log(sum);                     // 166





/////sorting array
sort method sorts the array element default sorting is in ascending order
it first converts the element into string if they are not and then do the sorting
example:
const months = ['March', 'Jan', 'Feb', 'Dec'];
months.sort();
console.log(months);             //  Array ["Dec", "Feb", "Jan", "March"]

const array1 = [1, 30, 4, 21, 100000];
array1.sort();
console.log(array1);             // Array [1, 100000, 21, 30, 4]


so to actually sort numbers we need to specify condition
  return < 0, A, B (keep order)
  return > 0, B, A (switch order)

if a - b is then sort ascending
if b - a is then sort descending




/////more ways of creating and filling arrays
we can declare the array as
const x = new Array(7);
console.log(x);             // this will create an array of 7 elements but the array will be empty

so in this situation any other methods such as map or filter will simply not work, the only fill method will be useful
fill method is bit similar to slice method
x.fill(1, 3, 5);  // it will fill the array with 1 from starting index 3 upto 5
x.fill(1);        // it will fill the whole array with 1
console.log(x);

now to get the array like [1,2,3,4,5,6,7] we can use the Array.from method
here Array is a function and the from is the method 
we can also get the above result of all array elements as 1
const y = Array.from({length:7}, () => 1);
console.log(y);               // [1,1,1,1,1,1,1]

const z = Array.from({length:7}, (_, i) => i +1);        here the _ is the throwaway argument as we do not need the current element in here
console.log(z);               // [1,2,3,4,5,6,7]




/////which array method to use

1. mutate original array: 
   add to array - .push()    - end
                  .unshift() - start

   remove from array - .pop()     - end
                      .shift()   - start
                      .splice()  - array

   other - .reverse(), .sort(), .fill()

2. new array:
   .map() - loops over array
   .filter() - filters by given condition
   .slice() - gives portion of array
   .concat() - adds two or more array
   .flat() - flats nested array into single array
   .fatMap() - uses flat and map method combinely

3. array index:
   .indexOf() - gives output based on value
   .findIndex() - gives output based on given condition

4. array element:
   .find() - gives the array element based on the given condition

5. to know if array includes:(all returns boolean value) 
   .includes() - gives output based on value
   .some() - gives output based on given condition(if any or some element of array satisfy the condition)
   .every() - gives output based on given condition(if every element of array satisfy the condition)

6. a new string:
   .join() - output based on specified separator

7. to transform to value:
   .reduce() - based on accumulator(boils down to single value of any type as string or number...)

8. to loop array:
   .forEach() - based on callback it doesnot create new array instead just loops over it







filter map reduce sort some forEach includes indexOf slice splice